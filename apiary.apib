FORMAT: 1A
HOST: http://gateway-test.duhs.duke.edu

# Duke Educational Gateway (DEG)

<hr>
<h1 style="color: blue;">Introduction</h1>
<hr>

The Duke Educational Gateway (DEG) is a Web/native mobile application platform that is utilized for the configuration and delivery of 
video based CME courses to medical professionals.  This is the core Web services API that support these client platform implementations.  The current 
client products are vertically branded for **Duke University**, but the server API implementation is horizontal, it can be leveraged (and branded)
by any client application that is built with the intent to deliver video based CME course content.

Course Activity Models
------------------
This section will contain links to activity diagrams for both **Course Configuration** and **Course Delivery** work-flow. (To be completed)

Mock Server API
------------------
This intent of this site is purely _good documetation_ on how to interact with the API - it is a mock of a live server implementation.  If you want to 
navigate a live Web browsable implementation - then hit the [Gateway API Test Site](https://gateway-test.duhs.duke.edu/gateway/api/).  **Yout must login with the 
demo account credentials:** `demo1234/Demo1234`.  _(The login link is in the top right corner of the Web interface)_

RESTful Principles
------------------
The API was developed with the intent to be a RESTful as possible... it was designed to have predictable, resource-oriented URLs, 
and to use [HTTP Response Codes](https://developer.mozilla.org/en-US/docs/HTTP/Response_codes) to indicate the status of API endpoint requests. 

Resourse Relationships
-------------------
The API implementation returns JSON - within the context of a payload for a specific resource/object, the identity of an object is
represented as hyperlink (i.e. a unique URL).  In addition, relationships to other resources/objects are represented as hyperlinks.  What does
this mean to you... that you can navigate the API through hyperlinks.  For relational database oriented thinkers - this means your 
_Primary Keys_ and _Foreign Keys_ are hyperlinks to the objects JSON representation.  When creating objects through the API you will see that
these relationships _Foreign Keys_ are specified as absolute URLs, not the numeric `id` of the related object.  For example `http:/baseurl/category/1` not simply `1`.

Authentication
--------------------
Token based authentication is required to access the API endpoints.  If you are provisioned an API account (username/password) by
the API development team you can retrieve your persistent API token - details are documented in the `Authentication` resource
section herein.

Response Types
--------------------
Currently JSON will be returned in all responses from the API.  There are a few exceptions where HTML content is returned
to meet the needs of mobile and Web client applications - these special APIs are discussed in more detail in the API resourses section.

Governing List Size
-------------------
For API endpoint operations that return lists of objects/resources.  The number of objects returned can be governed by appending the 
`page_size` query paramater to the endpoint URL.  For example: `/courses?page_size=25`

<hr>
<h1 style="color: blue;">The API Resources and their RESTful Endpoints...</h1>
<hr>

# Group Authentication Token

## Token [/api-token-auth] 

### Retrieve API Token [POST]

Retrieve a Token for an authorized user account. (i.e. username/password)    
DEPRECATED - use endpoint: `/userProfile/authToken`
+ Request (application/json)

        {"username": "mockuser", "password": "mockpassword"}
        
    
+ Response 200 (application/json)

        {"token": "9999-mock-api-token-1111"}
        
# Group UserProfile
UserProfile resourse represents profile information for the currently authenticated user.

## UserProfile Object [/userProfile]

### Retrieve [GET]
+ Response 200 (application/json)

        {"payload": "mock"}
        
### Update [POST]
+ Request (application/json)

        {"first_name": "Dave", "last_name": "Tester", 
         "email": "dave@test.edu", "username": "dave1234"}
        
+ Response 200 (application/json)

        {"payload": "mock"}
        
## UserProfile Register [/userProfile/register]
End user account creation/registration.

### Register [POST]
+ Request (application/json)

        {"first_name": "Dave", "last_name": "Tester", 
         "email": "dave@test.edu", "username": "dave1234", 
         "password1": "Dave@1234", "password2": "Dave@1234"}
        
+ Response 201 (application/json)

        {"payload": "mock"}
        
## UserProfile Token Auth [/userProfile/authToken]
Get authorized users API token.

### Get Auth Token [POST]
+ Request (application/json)

        {"username": "mockuser", "password": "mockpassword"}
        
    
+ Response 200 (application/json)

        {"token": "9999-mock-api-token-1111"}

# Group Courses
Course is the central resource of the Gateway API.  A Course payload includes the composite 
resources that drive course delivery work-flow:

*  Video
*  Quiz (Assessment)
*  Evaluation

The following key fields that drive course delivery work-flow are included within the Course payload:

* `watch_url` within the context of `courseitems.video` is a wrapped link (URL) that redirects to the source video URL (i.e. Youtube, Vimeo, etc.).
* `take_url` within the context of `courseitems.quiz` is a URL that renders the course quiz (assessment) form (Bootstrap HTML form).
* `take_url` within the context of `courseitems.eval` is a URL that renders the course evaluation form (Bootstrap HTML form).

## Courses Collection [/courses{?search,category_id}]
+ Parameters
    + search (optional, string, `aortic`) ... The `search` parameter specifies a single search term, thereby requesting courses 
    that have content which matches the term (performs full-text search).
    + category_id (optional, number, `1`) ... The `category_id` parameter specifies a gateway course category, thereby requesting 
    courses associated with that category.

### List [GET]
+ Response 200 (application/json)

        {"payload": "mock"}
        
## Course Object [/courses/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.
    

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}

# Group Categories
Courses can be associated to one or more Gateway Categories. (i.e. Cardiology, Oncology, etc.)

## Categories Collection [/categories]

### List [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
## Category Object [/categories/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
# Group UserMyListCourses
UserMyListCourses resource represents Courses the authenticated User has added to their "My List" (i.e. think the Netflix model).

## UserMyListCourses Collection [/userMyListCourses]

### List [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
### Create [POST]
+ Request (application/json)

        {"course": "http:/{base_uri}/courses/1"}
        
+ Response 201 (application/json)

        {"mock payload": "stub"}
        
## UserMyListCourse Object [/userMyListCourses/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.
    

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
### Delete [DELETE]
+ Response 204

# Group UserWatchedCourses
UserWatchedCourses resource represents Courses for which the authenticated User has _watched_ the Course Video at some point. 
The users watched courses can never be _Deleted_.  Watched courses are added by the API when the user _watches_ the Course Video 
via the `take_url: /videos/{id}/watch` link within the Course payload.

## UserWatchedCourses Collection [/userWatchedCourses]

### List [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
## UserWatchedCourse Object [/userWatchedCourses/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
        
# Group UserInProgCourses
UserInProgCourses resource represents Courses the authenticated User has _started_ taking, but not _completed_ - it is up to the
client application the determine when a _started_ course event occurs via a client side action, such as an _Enroll in Course_ or
_Take Course_ user interface option.  The client may also _Drop_ a course. (i.e. _Delete_ the course from the users _in progress
courses_)

## UserInProgCourses Collection [/userInProgCourses]

### List [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}

        
### Create [POST]
+ Request (application/json)

        {"course": "http:/{base_uri}/courses/1"}
        
+ Response 201 (application/json)

        {"mock payload": "stub"}
        
## UserInProgCourse Object [/userInProgCourses/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.
    

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
### Delete [DELETE]
+ Response 204

# Group UserCompletedCourses
UserCompletedCourses resource represents Courses for which the authenticated User has completed the required Course 
components: _Video, Assessment, and Evaluation_.  Completed courses are added by the API when the user _completes_ the required components. 
If the Course exists in the users _in progress courses_, it is removed by the API at the time of completion.

## UserCompletedCourses Collection [/userCompletedCourses]

### List [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}
        
## UserCompletedCourse Object [/userCompletedCourses/{id}]
+ Parameters
    + id (required, number, `1`) ... The object identifier.

### Retrieve [GET]
+ Response 200 (application/json)

        {"mock payload": "stub"}